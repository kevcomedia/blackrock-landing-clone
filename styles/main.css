/* ======================================================================
 * BASE STYLES
 * ====================================================================== */

*,
*::before,
*::after {
  box-sizing: border-box;
}

:root {
  --color-default: #212529;
  --color-light: #f8f9fa;
  --color-muted: #6c757d;
  --color-primary: #007bff;
  --color-primary-transparent: rgba(0, 123, 255, 0.5);
  --color-primary-dark: #0069d9;
  --color-primary-darker: #0056b3;
  --color-white: #fff;
  --padding-none: 1rem;
  --padding-xxs: 5rem;
  --padding-xs: 7rem;
  --padding-sm: 11rem;
  --padding-md: 14rem;
  --padding-lg: 19rem;
}

html {
  font-size: 10px;
}

body {
  background-color: var(--color-white);
  color: var(--color-default);
  font: 300 2rem/1.4 'Lato', Helvetica, Arial, sans-serif;
  margin: 0;
}

/**
 * Removal of top margin of common block elements. Vertical positioning is then
 * done by changing the bottom margin (or top padding of a containing element)
 * wherever needed.
 */
h1, h2, h3, h4, h5, h6, p, ul {
  margin-top: 0;
}

/**
 * Sensible line heights for large headings.
 */

h1, h2, h3 {
  line-height: 1.2;
}

a {
  color: var(--color-primary);
  text-decoration: none;
}

a:hover {
  color: var(--color-primary-darker);
  text-decoration: underline;
}

/* ======================================================================
 * COMMON MODULES
 * ====================================================================== */

/* Backgrounds
 * ====================================================================== */

/**
 * For sections with a light gray background instead of white.
 */
.bg-light { background-color: var(--color-light); }

/* Form Controls
 * ====================================================================== */

/**
 * Buttons and input fields same some common styles, such as padding, border
 * radius, etc. The page is only going to have a couple email fields, so there's
 * no need to write classes for them.
 *
 * 2. Inherit parent font styles for `button`s and `input`s (since they don't by
 * default)
 */

input,
.btn {
  --border-color: initial;
  border: 0.1rem solid var(--border-color);
  border-radius: 0.5rem;
  display: inline-block;
  font-family: inherit; /* 2 */
  font-size: 2rem; /* 2 */
  font-weight: 400; /* 2 */
  line-height: 1;
  padding: 1.3rem 1.7rem;
  transition: all ease 0.3s;
}

/**
 * Input styles.
 */

input {
  --border-color: #ced4da;
  color: #495057;
  transition-property: border-color, box-shadow;
}

input:focus {
  --border-color: #80bdff;
  box-shadow: 0 0 0.3rem var(--color-primary-transparent);
}

/**
 * Buttons on their own don't have color-related styles. Extend with
 * `.btn-<type>` classes. Intended to be usable by `a`, `button`, and
 * `input[type="button"]` elements.
 */

.btn {
  --border-color: transparent;
  cursor: pointer;
  transition-property: border, background-color, color, box-shadow;
}

/**
 * Prevent `a.btn` from showing underline on hover (as declared above).
 */
.btn:hover {
  text-decoration: none;
}

/** Button types */

.btn-primary {
  --border-color: var(--color-primary);
  background-color: var(--color-primary);
  color: var(--color-white);
}

.btn-primary:hover {
  --border-color: var(--color-primary-dark);
  background-color: var(--color-primary-dark);
  color: var(--color-white);
}

.btn-primary:focus {
  box-shadow: 0 0 0 0.3rem var(--color-primary-transparent);
}

/** Button sizes */

.btn-sm { 
  font-size: 1.6rem;
  padding: 1.1rem 1.3rem;
}

/* Forms
 * ====================================================================== */

/**
 * The forms for the page are all inline forms that collapse to regular stacking
 * layout when the viewport is narrow enough. Again there are only a few forms
 * in the page (all of which have identical layouts), so there's no need for
 * classes.
 *
 * The forms only have an input and a button as children.
 *
 * 1. Center form within container.
 * 2. Button goes under input by default.
 */

form {
  display: flex;
  flex-wrap: wrap; /* 2 */
  margin: auto; /* 1 */
  max-width: 51rem;
  width: 100%;
}

/** 1. Form elements take up full width by default. */

form input,
form .btn {
  flex: 100%; /* 1 */
}

form input {
  margin-bottom: 0.8rem;
}

/**
 * 1. At >= 768px the form uses an inline layout.
 */

@media screen and (min-width: 768px) {
  form {
    flex-wrap: nowrap; /* 1 */
    max-width: 57rem;
  }

  /**
   * 1. The input takes up three times the horizontal space as the button.
   * 2. Move spacing margin from bottom to right.
   */

  form input {
    flex: 75%; /* 1 */
    margin-bottom: 0; /* 2 */
    margin-right: 1rem; /* 2 */
  }

  form .btn {
    flex: 25%;
  }
}

/* Screen Reader Only
 * ====================================================================== */

.sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/* ======================================================================
 * LAYOUT
 * ====================================================================== */

/* Containers
 * ====================================================================== */

/**
 * A container is supposed to be used for elements that span the width of the
 * page, but provides some space around their content. There will always be some
 * fixed amount of gutter around the content below a certain viewport width.
 * Beyond that, the content stops expanding and the gutters start to expand.
 * In other words containers breakout.
 */

.container {
  --main-max-width: 110rem;
  --grid-gutter: minmax(1.5rem, 1fr);
  --grid-main: minmax(0, var(--main-max-width));

  display: grid;
  grid-template-columns:
    [full-start] var(--grid-gutter)
    [main-start] var(--grid-main)
    [main-end] var(--grid-gutter)
    [full-end];
}

.container-narrow { --main-max-width: 85rem; }

/** Direct children of `.container` are placed on the main grid column, unless
 * the child is a `.full-span`. */
.container > * { grid-column: main; }
.container > .full-span { grid-column: full; }

/* Flexbar
 * ====================================================================== */

/**
 * A flexbar is a wrapping flex container. It's designed for having three items
 * in it.
 *
 * 1. Remove default `ul` styles.
 * 2. Negative bottom margin to cancel the last item's bottom margin.
 */

.flexbar {
  --item-gap: 5rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  list-style-type: none; /* 1 */
  margin: 0 0 calc(-1 * var(--item-gap)); /* 1, 2 */
  padding: 0; /* 1 */
}

/**
 * 1. Bottom margin for when the items are stacked on top of each other. The
 * last item's margin is cancelled by the parent's negative bottom margin.
 * 2. Make sure the items have the same width every time.
 * 3. Probably out of place, but both flexbars in the page have centered text.
 */

.flexbar-item {
  margin: 0 auto var(--item-gap); /* 1 */
  flex: 1 1 100%; /* 2 */
  max-width: 32rem;
  text-align: center; /* 3 */
}

/* Vertical padding
 * ====================================================================== */

/**
 * Utility classes for setting the vertical padding of elements. In the
 * meantime, they're only used for modifying the vertical padding of
 * `.container`s (which is probably a clumsy approach).
 *
 * By default a `.pd` has some sizeable amount of padding, but can be extended
 * with `.pd-<size>` classes.
 */

.pd {
  --padding-vertical: var(--padding-md);
  padding-bottom: var(--padding-vertical);
  padding-top: var(--padding-vertical);
}

/**
 * Padding sizes
 */

.pd-lg { --padding-vertical: var(--padding-lg); }
.pd-sm { --padding-vertical: var(--padding-sm); }
.pd-xs { --padding-vertical: var(--padding-xs); }
.pd-none { --padding-vertical: var(--padding-none); }

/* ======================================================================
 * MODULES
 * ====================================================================== */

/* Topbar
 * ====================================================================== */

/**
 * The topbar contains the page's brand and a sign-in button, both of which are
 * flushed to either side.
 */

.topbar {
  align-items: center;
  display: flex;
  justify-content: space-between;
}

/**
 * Brand styles. The brand also acts as a link to the site's home page (more
 * accurately, it contains the link; the brand itself could be a heading).
 *
 * 1. Remove remaining vertical margin to vertically center in topbar.
 */

.brand {
  font-size: 2rem;
  font-weight: 400;
  margin-bottom: 0; /* 1 */
}

/**
 * The brand link. It should look like regular text no matter what.
 */

.brand a { color: var(--color-default); }
.brand a:hover { text-decoration: none; }

/* CTA
 * ====================================================================== */

/**
 * The fancy section with large text and a signup form.
 *
 * 1. Average color of the background image + the gray overlay.
 * 2. Laying a linear-gradient of single rgba to darken the image.
 */

.cta {
  --fallback-bg-color: #37587b; /* 1 */
  --bg-image-darken: rgba(64,64,64,0.5);

  --font-size: 3.2rem;
  --padding-vertical: var(--padding-sm);

  background:
    linear-gradient(0, var(--bg-image-darken), var(--bg-image-darken)), /* 2 */
    var(--fallback-bg-color) center / cover no-repeat url('https://images.pexels.com/photos/636353/pexels-photo-636353.jpeg?auto=compress&cs=tinysrgb&w=1280&h=960');
  color: var(--color-white);
  padding-bottom: var(--padding-vertical);
  padding-top: var(--padding-vertical);
}

/**
 * The primary CTA looks roomier, and has larger padding.
 */

.cta-primary {
  --padding-vertical: var(--padding-md);
}

/**
 * The primary CTA appears larger on wider viewports, and thus has larger
 * vertical padding and text size.
 */

@media screen and (min-width: 768px) {
  .cta-primary {
    --padding-vertical: var(--padding-lg);
    --font-size: 4.8rem;
  }
}

.cta h1 {
  font-size: var(--font-size);
  font-weight: 700;
  line-height: 1.2;
  text-align: center;
}

/* Feature Strip
 * ====================================================================== */

/**
 * The feature strip is a summary of features.
 */

.feature-strip h3 {
  font-size: 2.8rem;
  margin-bottom: 1rem;
}

.feature-strip p {
  margin-bottom: 0;
}

.fs-icon {
  color: var(--color-primary);
  font-size: 6rem;
}

/**
 * 1. Roughly equivalent to increasing font size to 6.4rem. Just increasing the
 * font size directly pushes content down, which is undesired.
 */

.feature-strip li:hover .fs-icon {
  transform: scale(1.0667); /* 1 */
}

/* Feature rows
 * ====================================================================== */

/**
 * A feature row is a row that consists of a decorative image and text content.
 * On mobile the image is stacked on top of the text. On larger viewports, they
 * are laid side by side, taking half of the row's width. The image alternates
 * between being on the right half and being on the left half.
 *
 * A row always spans the page's full width.
 *
 * 1. Flex properties for image and text. When there's enough horizontal space,
 * lay them side by side.
 * 2. The row's image URL.
 */

.feature-row {
  --bg-image: none; /* 2 */
  --flex: 1 1 49.6rem; /* 1 */
  display: flex;
  flex-wrap: wrap;
}

/**
 * 1. Put the image of every other row on the right side.
 */

.feature-row:nth-child(odd) {
  flex-direction: row-reverse; /* 1 */
}

/**
 * The image is placed on a pseudo-element. The image has no real semantic
 * value, so it can be generated using CSS instead.
 *
 * 1. Apparently pseduo-elements cannot be targeted with the universal *
 * selector, so the flex property has to be set directly, instead of using
 * `.feature-row > *`.
 * 2. Sensible minimum height when in stacking mode.
 */

.feature-row::before {
  background: var(--bg-image) 0 0 / cover no-repeat;
  content: '';
  display: block;
  flex: var(--flex); /* 1 */
  min-height: 48rem; /* 2 */
}

.fr-1 {
  --bg-image: url('https://images.pexels.com/photos/193004/pexels-photo-193004.jpeg?auto=compress&cs=tinysrgb&w=800&h=600');
}
.fr-2 {
  --bg-image: url('https://images.pexels.com/photos/270366/pexels-photo-270366.jpeg?auto=compress&cs=tinysrgb&w=800&h=600');
}
.fr-3 {
  --bg-image: url('https://images.pexels.com/photos/1148496/pexels-photo-1148496.jpeg?auto=compress&cs=tinysrgb&w=800&h=600');
}

/**
 * The rows' text content.
 *
 * 1. Center vertically.
 * 2. Slight padding on mobile.
 */

.fr-prose {
  display: flex; /* 1 */
  flex-direction: column; /* 1 */
  flex: var(--flex);
  justify-content: center; /* 1 */
  padding: var(--padding-xxs); /* 2 */
}

/**
 * 1. Add more padding for larger viewports.
 */

@media screen and (min-width: 768px) {
  .fr-prose {
    padding: var(--padding-sm); /* 1 */
  }
}

.fr-prose h3 {
  font-size: 3.2rem;
  line-height: 1.2;
  margin-bottom: 1rem;
}

.fr-prose p {
  margin-bottom: 0;
}

/* Testimonials
 * ====================================================================== */

/**
 * List of testimonials with pictures.
 */

.testimonials h2 {
  text-align: center;
  margin-bottom: 5rem;
}

/**
 * A testimonial item is a vertical flex container. This is so the portrait in
 * it can be put visually over the person's name, while keeping it below the
 * name in the markup.
 */

.testimonial-item {
  align-items: center;
  display: flex;
  flex-direction: column;
}

.testimonial-item h3 {
  font-size: 2rem;
  line-height: 1.2;
  margin-bottom: 1rem;
}

/**
 * Portrait for the person making the testimonial.
 *
 * 1. Visually put the image on top of the name.
 * 2. The images used intrinsically are 190x190. Just adding this here for good
 * measure.
 */

.testimonial-item img {
  border-radius: 50%;
  box-shadow: 0 0.5rem 0.5rem rgba(0, 0, 0, 0.25);
  display: block;
  height: auto; /* 2 */
  margin-bottom: 2rem;
  max-width: 19rem; /* 2 */
  order: -1; /* 1 */
}

.testimonial-item p {
  font-size: 1.6rem;
  margin-bottom: 0;
}

/* Page Footer
 * ====================================================================== */

/**
 * The footer contains additional navigation, copyright info, and social media
 * links.
 *
 * 1. The contents stack on mobile, and are side by side on larger viewports.
 */

.page-footer {
  display: flex;
  flex-direction: column; /* 1 */
  font-size: 1.6rem;
  font-weight: 400;
}

/**
 * The left part of the footer (which contains the text) are centered on mobile.
 */

.page-footer-left {
  text-align: center; /* 1 */
}

/**
 * Both the footer nav and social media links are horizontal lists stripped off
 * their default styles.
 */

.footer-nav,
.social-media-links {
  display: flex;
  justify-content: center;
  list-style-type: none;
  margin: 0;
  padding: 0;
}

/**
 * Navigation links inside the footer. The links are separated by a decorative
 * dot:
 *
 *   About  ⋅  Contact  ⋅  ...
 *
 * 1. Horizontal space between the links and dots. Variable is defined here so
 * the dots (which are actually pseudo-elements) can access the value.
 * 2. Vertical space between links and copyright info.
 */

.footer-nav {
  --spacer: 1.2rem; /* 1 */
  margin-bottom: 0.8rem; /* 2 */
  flex-wrap: wrap;
}

/**
 * 1. Each link item is set to flex, so the dots are horizontally aligned with
 * the text.
 */

.footer-nav li {
  display: flex; /* 1 */
}

/**
 * 1. All links except the last are given the spacer.
 */

.footer-nav li:not(:last-child) {
  margin-right: var(--spacer); /* 1 */
}

/**
 * 1. The decorative dots are also given the same amount of spacer on the other
 * side.
 */

.footer-nav li:not(:last-child)::after {
  content: '⋅';
  display: block;
  margin-left: var(--spacer); /* 1 */
}

.footer-copyright {
  color: var(--color-muted);
}

/**
 * I wanted to try the same technique I used for the feature rows, but since
 * the text herein are centered on mobile and left-aligned otherwise, I opted
 * for the media-query approach instead.
 */

@media screen and (min-width: 992px) {
  .page-footer {
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
  }

  .page-footer-left {
    text-align: left;
  }

  /**
   * 1. Remove copyright bottom margin so as not to mess up the footer contents'
   * vertical centering.
   */
  
  .footer-copyright {
    margin-bottom: 0; /* 1 */
  }
}

.social-media-links {
  --item-size: 3.2rem;
  font-size: var(--item-size);
}

.social-media-links li:not(:last-child) {
  margin-right: var(--item-size);
}
