/* ======================================================================
 * BASE STYLES
 * ====================================================================== */

*,
*::before,
*::after {
  box-sizing: border-box;
}

:root {
  --color-default: #212529;
  --color-light: #f8f9fa;
  --color-muted: #6c757d;
  --color-primary: #007bff;
  --color-primary-transparent: rgba(0, 123, 255, 0.5);
  --color-primary-hover: #0069d9;
  --color-white: #fff;
}

html {
  font-size: 10px;
}

body {
  background-color: var(--color-white);
  color: var(--color-default);
  font: 300 2rem/1.4 'Lato', Helvetica, Arial, sans-serif;
  margin: 0;
}

/**
 * Removal of top margin of common block elements. Vertical positioning is then
 * done by changing the bottom margin (or top padding of a containing element)
 * wherever needed.
 */
h1, h2, h3, h4, h5, h6, p, ul {
  margin-top: 0;
}

a {
  color: var(--color-primary);
  text-decoration: none;
}

a:hover {
  color: var(--color-primary-hover);
  text-decoration: underline;
}

/* ======================================================================
 * COMMON MODULES
 * ====================================================================== */

/* Backgrounds
 * ====================================================================== */

/**
 * For sections with a light gray background instead of white.
 */
.bg-light { background-color: var(--color-light); }

/* Form Controls
 * ====================================================================== */

/**
 * Buttons and input fields same some common styles, such as padding, border
 * radius, etc. The page is only going to have a couple email fields, so there's
 * no need to write classes for them.
 *
 * 1. Remove borders for `button`s and `input`s.
 * 2. Inherit parent font styles for `button`s and `input`s (since they don't by
 * default)
 */

input,
.btn {
  border: none; /* 1 */
  border-radius: 0.5rem;
  display: inline-block;
  font-family: inherit; /* 2 */
  font-size: 2rem; /* 2 */
  font-weight: 400; /* 2 */
  line-height: 1;
  padding: 1.3rem 1.7rem;
  transition: all ease 0.3s;
}

/**
 * Input styles.
 */

input {
  --border-color: #ced4da;
  border: 0.1rem solid var(--border-color);
  color: #495057;
  transition-property: border-color, box-shadow;
}

input:focus {
  --border-color: #80bdff;
  box-shadow: 0 0 0.3rem var(--color-primary-transparent);
}

/**
 * Buttons on their own don't have color-related styles. Extend with
 * `.btn-<type>` classes. Intended to be usable by `a`, `button`, and
 * `input[type="button"]` elements.
 */

.btn {
  cursor: pointer;
  transition-property: background-color, color, box-shadow;
}

/**
 * Prevent `a.btn` from showing underline on hover (as declared above).
 */
.btn:hover {
  text-decoration: none;
}

/** Button types */

.btn-primary {
  background-color: var(--color-primary);
  color: var(--color-white);
}

.btn-primary:hover {
  background-color: var(--color-primary-hover);
  color: var(--color-white);
}

.btn-primary:focus {
  box-shadow: 0 0 0 0.3rem var(--color-primary-transparent);
}

/** Button sizes */

.btn-sm { font-size: 1.6rem; }

/* ======================================================================
 * LAYOUT
 * ====================================================================== */

/* Containers
 * ====================================================================== */

/**
 * A container is supposed to be used for elements that span the width of the
 * page, but provides some space around their content. There will always be some
 * fixed amount of gutter around the content below a certain viewport width.
 * Beyond that, the content stops expanding and the gutters start to expand.
 * In other words containers breakout.
 */

.container {
  --main-max-width: 110rem;
  --grid-gutter: minmax(1.5rem, 1fr);
  --grid-main: minmax(0, var(--main-max-width));
  --padding-vertical: 14rem;

  display: grid;
  grid-template-columns:
    [full-start] var(--grid-gutter)
    [main-start] var(--grid-main)
    [main-end] var(--grid-gutter)
    [full-end];
  padding-bottom: var(--padding-vertical);
  padding-top: var(--padding-vertical);
}

.container-narrow { --main-max-width: 80rem; }

/** Direct children of `.container` are placed on the main grid column, unless
 * the child is a `.full-span`. */
.container > * { grid-column: main; }
.container > .full-span { grid-column: full; }

/* Vertical padding
 * ====================================================================== */

/**
 * Utility classes for setting the vertical padding of elements. In the
 * meantime, they're only used for modifying the vertical padding of
 * `.container`s (which is probably a clumsy approach).
 *
 * By default a `.pd` has some sizeable amount of padding, but can be extended
 * with `.pd-<size>` classes.
 */

.pd {
  --padding-vertical: 14rem;
  padding-bottom: var(--padding-vertical);
  padding-top: var(--padding-vertical);
}

/**
 * Padding sizes
 */

.pd-lg { --padding-vertical: 19rem; }
.pd-sm { --padding-vertical: 11rem; }
.pd-xs { --padding-vertical: 7rem; }
.pd-none { --padding-vertical: 1rem; }

/* ======================================================================
 * MODULES
 * ====================================================================== */

/* Topbar
 * ====================================================================== */

/**
 * The topbar contains the page's brand and a sign-in button, both of which are
 * flushed to either side.
 */

.topbar {
  align-items: center;
  display: flex;
  justify-content: space-between;
}

/**
 * Brand styles. The brand also acts as a link to the site's home page (more
 * accurately, it contains the link; the brand itself could be a heading).
 *
 * 1. Remove remaining vertical margin to vertically center in topbar.
 */

.brand {
  font-size: 2rem;
  font-weight: 400;
  margin-bottom: 0; /* 1 */
}

/**
 * The brand link. It should look like regular text no matter what.
 */

.brand a { color: var(--color-default); }
.brand a:hover { text-decoration: none; }

/* Hero
 * ====================================================================== */

/**
 * The fancy section that users see first.
 *
 * 1. Average color of the background image + the gray overlay.
 * 2. Laying a linear-gradient of single rgba to darken the image.
 */

.hero {
  --fallback-bg-color: #37587b; /* 1 */
  --bg-image-darken: rgba(64,64,64,0.5);
  background:
    linear-gradient(0, var(--bg-image-darken), var(--bg-image-darken)), /* 2 */
    var(--fallback-bg-color) center / cover no-repeat url('https://images.pexels.com/photos/636353/pexels-photo-636353.jpeg?auto=compress&cs=tinysrgb&w=1280&h=960');
  color: var(--color-white);
}

.hero h1 {
  line-height: 1.3;
  text-align: center;
}
